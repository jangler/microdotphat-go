package microdotphat

import (
	"reflect"
	"testing"
)

// helper function for testing return value of String()
func assertString(t *testing.T, expected string) {
	t.Helper()
	if expected[0] == '\n' {
		expected = expected[1:]
	}
	if expected[len(expected)-1] == '\n' {
		expected = expected[:len(expected)-1]
	}
	updateMatrices()
	assertEqual(t, String(), expected)
}

// helper function for comparing valuee
func assertEqual(t *testing.T, received, expected interface{}) {
	t.Helper()
	if !reflect.DeepEqual(expected, received) {
		t.Errorf("\nexpected %s:\n%v\nreceived %s:\n%v\n",
			reflect.TypeOf(expected).Name(), expected,
			reflect.TypeOf(received).Name(), received)
	}
}

func TestClear(t *testing.T) {
	WriteString("Hello!", 0, 0, false)
	SetDecimal(0, true)
	Clear()
	assertString(t, `
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
}

func TestCloseNoConn(t *testing.T) {
	assertEqual(t, Close(), ErrNoConn)
}

func TestDrawTiny(t *testing.T) {
	Clear()
	DrawTiny(0, "123")
	DrawTiny(5, "456")
	assertString(t, `
#####   .....   .....   .....   .....   #####
#.#.#   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   #.###
###.#   .....   .....   .....   .....   ###.#
#.###   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   ...##
#####   .....   .....   .....   .....   ####.
.       .       .       .       .       .    
`)
}

func TestExpandBuffer(t *testing.T) {
	Clear()
	SetPixel(Width, Height, true)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
	Scroll(1, 1)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   ....#
.       .       .       .       .       .    
`)
}

func TestFill(t *testing.T) {
	Clear()
	Fill(true)
	assertString(t, `
#####   #####   #####   #####   #####   #####
#####   #####   #####   #####   #####   #####
#####   #####   #####   #####   #####   #####
#####   #####   #####   #####   #####   #####
#####   #####   #####   #####   #####   #####
#####   #####   #####   #####   #####   #####
#####   #####   #####   #####   #####   #####
.       .       .       .       .       .    
`)
	Fill(false)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
}

func TestScrollAndMirror(t *testing.T) {
	Clear()
	SetPixel(0, 0, true)
	Scroll(1, 0)
	assertString(t, `
.....   .....   .....   .....   .....   ....#
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
	Scroll(0, 1)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   ....#
.       .       .       .       .       .    
`)
	ScrollTo(-1, -1)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.#...   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
	SetMirror(true, false)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   ...#.
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
	SetMirror(false, true)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.#...   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
	SetMirror(true, true)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   ...#.
.....   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
	SetMirror(false, false)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.#...   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
}

func TestSetBrightness(t *testing.T) {
	SetBrightness(0)
	assertEqual(t, brightness_, byte(0))
	SetBrightness(-1)
	assertEqual(t, brightness_, byte(0))
	SetBrightness(0.5)
	assertEqual(t, brightness_, byte(63))
	SetBrightness(1)
	assertEqual(t, brightness_, byte(127))
	SetBrightness(2)
	assertEqual(t, brightness_, byte(127))
}

func TestSetBrightnessNoConn(t *testing.T) {
	assertEqual(t, SetBrightness(0), ErrNoConn)
}

func TestSetCol(t *testing.T) {
	Clear()
	SetCol(1, 0b1000001)
	SetCol(2, 0b1111111)
	SetCol(3, 0b1000000)
	assertString(t, `
.##..   .....   .....   .....   .....   .....
..#..   .....   .....   .....   .....   .....
..#..   .....   .....   .....   .....   .....
..#..   .....   .....   .....   .....   .....
..#..   .....   .....   .....   .....   .....
..#..   .....   .....   .....   .....   .....
.###.   .....   .....   .....   .....   .....
.       .       .       .       .       .    
`)
}

func TestSetDecimal(t *testing.T) {
	Clear()
	SetDecimal(0, true)
	SetDecimal(1, true)
	SetDecimal(1, false)
	SetDecimal(5, true)
	assertString(t, `
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
.....   .....   .....   .....   .....   .....
#       .       .       .       .       #    
`)
}

func TestShowNoConn(t *testing.T) {
	assertEqual(t, Show(), ErrNoConn)
}

func TestWriteStringKern(t *testing.T) {
	Clear()
	WriteString("Hello!", 1, 0, true)
	assertString(t, `
.#...   .....   ....#   .....   .#...   .....
.#...   .....   .....   .....   .#...   .....
.#...   ###..   .....   ..###   .#...   .....
.####   ...#.   .....   .#...   .#...   .....
.#...   ####.   .....   .#...   .#...   .....
.#...   .....   .....   .#...   .....   .....
.#...   ###..   #...#   ..###   .#...   .....
.       .       .       .       .       .    
`)
}

func TestWriteStringNoKern(t *testing.T) {
	Clear()
	WriteString("Hello!", 0, 0, false)
	assertString(t, `
#...#   .....   .##..   .##..   .....   ..#..
#...#   .....   ..#..   ..#..   .....   ..#..
#...#   .###.   ..#..   ..#..   .###.   ..#..
#####   #...#   ..#..   ..#..   #...#   ..#..
#...#   #####   ..#..   ..#..   #...#   ..#..
#...#   #....   ..#..   ..#..   #...#   .....
#...#   .###.   .###.   .###.   .###.   ..#..
.       .       .       .       .       .    
`)
}
